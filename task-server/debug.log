{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T15:57:51.144Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:00:50.410Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:07:35.410Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:09:01.053Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:09:38.015Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:14:02.671Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:14:03.247Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:14:04.287Z'
}
{
  level: '\x1B[32minfo\x1B[39m',
  message: 'Fetching user by id: ',
  timestamp: '2021-02-14T16:14:12.728Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:14:16.091Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:15:45.855Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:19:38.188Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:20:38.322Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:23:37.170Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:24:29.234Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:24:58.897Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:25:35.058Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:27:08.906Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:27:16.681Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:27:22.275Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:27:32.146Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:27:37.668Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:28:15.164Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:28:19.871Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:28:25.574Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:28:46.671Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T16:28:47.676Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T17:54:01.447Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T17:54:20.935Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-12T14:04:52.040Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: ' JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-12T14:04:52.040Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T17:58:16.365Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:00:31.577Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:00:49.566Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:01:05.554Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:14:09.514Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:15:03.719Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:23:29.432Z'
}
{
  firstName: 'komana',
  lastName: 'tembo',
  email: 'komana@gmail.com',
  password: 'komana',
  level: '\x1B[32minfo\x1B[39m',
  message: 'Create a new user',
  timestamp: '2021-02-14T18:24:10.814Z'
}
{
  firstName: 'joshua',
  lastName: 'makomele',
  email: 'joshua@gmail.com',
  password: 'joshua',
  level: '\x1B[32minfo\x1B[39m',
  message: 'Create a new user',
  timestamp: '2021-02-14T18:26:40.475Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:28:34.949Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:29:13.203Z'
}
{
  firstName: 'witness',
  lastName: 'mkama',
  email: 'witness@gmail.com',
  password: 'witness',
  level: '\x1B[32minfo\x1B[39m',
  message: 'Create a new user',
  timestamp: '2021-02-14T18:30:18.446Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:31:09.487Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:31:30.146Z'
}
{
  firstName: 'hans',
  lastName: 'andrew',
  email: 'hans@gmail.com',
  password: 'hansnet',
  level: '\x1B[32minfo\x1B[39m',
  message: 'Create a new user',
  timestamp: '2021-02-14T18:32:29.585Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:43:37.403Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:44:01.422Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:44:22.003Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:44:23.861Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:44:26.572Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:44:29.620Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:44:40.627Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:45:03.105Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:45:04.751Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:45:11.627Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:45:19.313Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:45:25.624Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:45:38.203Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:45:49.246Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:45:51.134Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:45:58.209Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:47:02.673Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:47:05.055Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:49:16.745Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:49:23.930Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:49:29.509Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:50:31.451Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:50:32.856Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:50:48.348Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:50:58.441Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:51:10.655Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:51:14.314Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:53:13.400Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:53:26.832Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:53:38.044Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:53:40.408Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:53:41.741Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:53:49.975Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:54:16.722Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:54:21.171Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:54:25.300Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:54:53.365Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:55:11.327Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:56:06.428Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:56:21.812Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:56:22.916Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:56:26.669Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:56:28.918Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:56:30.692Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:56:42.960Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:57:07.230Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:57:15.429Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T18:57:18.726Z'
}
{
  firstName: 'rehema',
  lastName: 'fredy',
  email: 'rehema@gmail.com',
  password: 'rehema',
  level: '\x1B[32minfo\x1B[39m',
  message: 'Create a new user',
  timestamp: '2021-02-14T18:58:30.882Z'
}
{
  firstName: 'rebecca',
  lastName: 'william',
  email: 'rebecca@gmail.com',
  password: 'rebecca',
  level: '\x1B[32minfo\x1B[39m',
  message: 'Create a new user',
  timestamp: '2021-02-14T18:59:41.094Z'
}
{
  firstName: 'benjamin',
  lastName: 'malongo',
  email: 'benjamin@gmail.com',
  password: 'benjamin',
  level: '\x1B[32minfo\x1B[39m',
  message: 'Create a new user',
  timestamp: '2021-02-14T19:00:48.582Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T19:02:47.626Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T19:03:28.849Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T19:04:25.875Z'
}
{
  firstName: 'darika',
  lastName: 'chriss',
  email: 'darika@gmail.com',
  password: 'darika',
  level: '\x1B[32minfo\x1B[39m',
  message: 'Create a new user',
  timestamp: '2021-02-14T19:04:40.220Z'
}
{
  firstName: 'allan',
  lastName: 'shoo',
  email: 'allan@gmail.com',
  password: 'allan',
  level: '\x1B[32minfo\x1B[39m',
  message: 'Create a new user',
  timestamp: '2021-02-14T19:05:43.263Z'
}
{
  firstName: 'jonathan',
  lastName: 'modest',
  email: 'jonathan@gmail.com',
  password: 'jonathan',
  level: '\x1B[32minfo\x1B[39m',
  message: 'Create a new user',
  timestamp: '2021-02-14T19:16:06.054Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T19:17:29.979Z'
}
{
  message: 'App listening on the port 3000',
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T19:17:51.787Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T19:17:53.578Z'
}
{
  message: [
    TasksEntity {
      id: 2,
      name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
      description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
        '\n' +
        ' \n' +
        'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-12T14:04:52.040Z,
      updatedAt: 2021-02-14T18:16:49.000Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 4,
      name: 'passport-jwt nodejs',
      description: 'Extracting the JWT from the request\n' +
        'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
        '\n' +
        'Included extractors\n' +
        'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-13T22:40:01.676Z,
      updatedAt: 2021-02-13T22:40:01.676Z,
      user: UserEntity {
        id: 1,
        firstName: 'christina',
        lastName: 'mwakila',
        email: 'christinamwaki@gmail.com',
        password: '$2a$10$3kChzkDCMZ.0Pi6/wBs39OVhtBoeJXhfHToxpa7ik64MtB//lwg76',
        role: 'admin',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:37:11.682Z,
        updatedAt: 2021-02-13T23:19:21.735Z,
        tasks: [
          TasksEntity {
            id: 4,
            name: 'passport-jwt nodejs',
            description: 'Extracting the JWT from the request\n' +
              'There are a number of ways the JWT may be included in a request. In order to remain as flexible as possible the JWT is parsed from the request by a user-supplied callback passed in as the jwtFromRequest parameter. This callback, from now on referred to as an extractor, accepts a request object as an argument and returns the encoded JWT string or null.\n' +
              '\n' +
              'Included extractors\n' +
              'A number of extractor factory functions are provided in passport-jwt.ExtractJwt. These factory functions return a new extractor configured with the given parameters.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-13T22:40:01.676Z,
            updatedAt: 2021-02-13T22:40:01.676Z,
            user: undefined
          }
        ]
      }
    },
    TasksEntity {
      id: 5,
      name: 'Configuring CORS w/ Dynamic Origin',
      description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
        '\n' +
        'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
        '\n' +
        'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
        '\n',
      isActive: true,
      isDeleted: false,
      createdAt: 2021-02-14T16:29:58.970Z,
      updatedAt: 2021-02-14T16:29:58.970Z,
      user: UserEntity {
        id: 2,
        firstName: 'andongwisye',
        lastName: 'mwamengo',
        email: 'mwamengo@gmail.com',
        password: '$2a$10$.XoquxsSREGH0eVkqywa5uaypZZwTUHsgu7WamedCfD8G7gg34BEq',
        role: 'normal',
        isActive: true,
        isDeleted: false,
        createdAt: 2021-02-11T20:41:55.357Z,
        updatedAt: 2021-02-11T20:41:55.357Z,
        tasks: [
          TasksEntity {
            id: 2,
            name: 'jwt.sign(payload, secretOrPrivateKey, [options, callback])',
            description: "This topic describes Angular's built-in protections against common web-application vulnerabilities and attacks such as cross-site scripting attacks. It doesn't cover application-level security, such as authentication and authorization.\n" +
              '\n' +
              ' \n' +
              'JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition Seconds Since the Epoch, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-12T14:04:52.040Z,
            updatedAt: 2021-02-14T18:16:49.000Z,
            user: undefined
          },
          TasksEntity {
            id: 5,
            name: 'Configuring CORS w/ Dynamic Origin',
            description: 'This module supports validating the origin dynamically using a function provided to the origin option. This function will be passed a string that is the origin (or undefined if the request has no origin), and a callback with the signature callback(error, origin).\n' +
              '\n' +
              'The origin argument to the callback can be any value allowed for the origin option of the middleware, except a function. See the confugration options section for more information on all the possible value types.\n' +
              '\n' +
              'This function is designed to allow the dynamic loading of allowed origin(s) from a backing datasource, like a database.\n' +
              '\n',
            isActive: true,
            isDeleted: false,
            createdAt: 2021-02-14T16:29:58.970Z,
            updatedAt: 2021-02-14T16:29:58.970Z,
            user: undefined
          }
        ]
      }
    }
  ],
  level: '\x1B[32minfo\x1B[39m',
  timestamp: '2021-02-14T19:17:59.153Z'
}
